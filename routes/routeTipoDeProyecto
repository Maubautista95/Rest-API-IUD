// routes/tipoDeProyecto.js
const express = require('express');
const router = express.Router();
const TipoDeProyecto = require('../models/tipoDeProyecto');

// Crear nuevo tipo de proyecto
router.post('/post', async (req, res) => {
  const data = new TipoDeProyecto({
    nombre: req.body.nombre
  });

  try {
    const dataToSave = await data.save();
    res.status(200).json(dataToSave);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Obtener todos los tipos de proyecto
router.get('/getAll', async (req, res) => {
  try {
    const data = await TipoDeProyecto.find();
    res.json(data);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Obtener un tipo de proyecto por ID
router.get('/getOne/:id', async (req, res) => {
  try {
    const data = await TipoDeProyecto.findById(req.params.id);
    res.json(data);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Actualizar un tipo de proyecto por ID
router.patch('/update/:id', async (req, res) => {
  try {
    const id = req.params.id;
    const updatedData = req.body;
    const options = { new: true };

    const result = await TipoDeProyecto.findByIdAndUpdate(id, updatedData, options);
    res.send(result);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Eliminar un tipo de proyecto por ID
router.delete('/delete/:id', async (req, res) => {
  try {
    const id = req.params.id;
    const data = await TipoDeProyecto.findByIdAndDelete(id);
    res.send(`Tipo de proyecto con nombre ${data.nombre} ha sido eliminado.`);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

module.exports = router;
